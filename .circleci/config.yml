version: 2.1
# orbs:
#   slack: circleci/slack@4.4.0

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name udapeople-back-end-"${CIRCLE_WORKFLOW_ID}"
#             aws cloudformation delete-stack --stack-name udapeople-front-end-"${CIRCLE_WORKFLOW_ID}"

  # revert-migrations:
  #   description: Revert the last migration if successfully run in the current workflow.
       
  #   steps:
  #     - run:
  #         name: Revert migrations
  #         # Add when this will run
  #         command: |
  #           # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
  #           SUCCESS = 1
  #           if(( $SUCCESS==1 )); 
  #           then
  #             cd ~/project/backend
  #             npm install
  #             cd backend
  #             npm run migrations:revert
  #           fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm i
             npm run build
             cd dist
             ls
           
      - save_cache:
          paths: 
            - /frontend/node_modules
          key: "npm-packages"
      - restore_cache:
          keys:
           -  "npm-packages"   
      # - slack/notify:
      #     #channel: '#project'
      #     event: fail
      #     template: build_failed
      # - slack/notify:
      #     #channel: '#project'  
      #     event: pass
      #     template: success_build      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            -  "npm-packages"  
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build 
             cd dist
             ls
      # - slack/notify:
      #     channel: '#project'
      #     event: fail
      #     template: build_failed
      # - slack/notify:
      #     channel: '#project'  
      #     event: pass
      #     template: success_build          
  test-frontend:
     docker:
       - image: circleci/node:13.8.0
     steps:
      - checkout
      - restore_cache:
          keys:
            -  "npm-packages" 
      - run:
          name: front-end test
          command: |
             cd frontend
             npm i
             npm run test
      # - slack/notify:
      #     channel: '#project'
      #     event: fail
      #     template: test_failed
      # - slack/notify:
      #     channel: '#project'  
      #     event: pass
      #     template: success_test       
                
  test-backend:
     docker:
       - image: circleci/node:13.8.0
     steps:
      - checkout
      - restore_cache:
          keys:
            -  "npm-packages" 
      - run:
          name: back-end test
          command: |
             cd backend
             npm i
             npm run test
      # - slack/notify:
      #     channel: '#project'
      #     event: fail
      #     template: test_failed
      # - slack/notify:
      #     channel: '#project'  
      #     event: pass
      #     template: success_test       
            
  scan-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
      - checkout
      - restore_cache:
          keys:
            -  "npm-packages" 
      - run:
          name: front-end scan
          command: |
             cd frontend
             npm audit fix --audit-level=critical 
      # - slack/notify:
      #     channel: '#project'
      #     event: fail
      #     template: scan_failed
      # - slack/notify:
      #     channel: '#project'  
      #     event: pass
      #     template: success_scan

  scan-backend:
      docker:
         - image: circleci/node:13.8.0
      steps:
      - checkout
      - restore_cache:
          keys:
            -  "npm-packages" 
      - run:
          name: back-end scan
          command: |
             cd backend
             npm audit fix 
      #        --audit-level=critical --force
      # - slack/notify:
      #     channel: '#project'
      #     event: fail
      #     template: scan_backend_failed
      # - slack/notify:
      #     channel: '#project'  
      #     event: pass
      #     template: success_scan_backend       
   
  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli 
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-back-end-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} 
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-front-end-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text >> .circleci/ansible/inventory.txt 
                           
      - run: cat   .circleci/ansible/inventory.txt
      - run:
          command: |
             curl -H "Content-Type: text/plain"  \
             -H "token: 8d7a2579-08d6-4634-ab0f-9991b68afb95"  \
             --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}                         
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
    #  - destroy_environment: #only executes if the job fails
 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
       - checkout
       - add_ssh_keys:
       #Ansible will have the creds it needs to access the EC2 instance
          fingerprints:  ["f5:f5:9e:fb:f7:5a:47:8a:ea:d9:b3:df:ef:dc:c8:4d"]
       - attach_workspace:
            at: ~/
       - run:
            name: Install dependencies
            command: |
              apk add --update ansible  
            
       - run:
            name: Configure server
            command: |
                ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
            
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations >> migration_output.txt
            cat migration_output.txt
            
      - run:
            name: Store migration result in a file.
            command: |
              cd backend
              if grep -q "has been executed successfully." migration_output.txt
               then
              curl -H "token: 8d7a2579-08d6-4634-ab0f-9991b68afb95" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              else
               return 0
              fi
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/outputs/
      # - destroy_environment:
      #       workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #          if  grep "has been executed successfully" db
      #          then
      #           curl -H "token: 8d7a2579-08d6-4634-ab0f-9991b68afb95" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      #          else
      #           return 0
      #          fi
           
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
             apk add --update curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)   
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
      - run: aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID}" --delete
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: ansible/ansible:default
    steps:
       - checkout
       - add_ssh_keys:
        #Ansible will have the creds it needs to access the EC2 instance
          fingerprints:  ["f5:f5:9e:fb:f7:5a:47:8a:ea:d9:b3:df:ef:dc:c8:4d"]
       - attach_workspace:
            at: ~/
       - run:
          name: Install dependencies
          command: |
            apk add --update ansible
       - run:
          name: Deploy backend
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      

  smoke-test:
    docker:
      - image: alpine:latest 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update curl
      - run:
          name: Get backend url
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            
              if curl -s --head ${API_URL} 
              then
               return 0
              else
               return 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
                URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-2.amazonaws.com"
                if curl -s ${URL} | grep "Welcome" 
                then
                return 0
                else
                return 1
                fi
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive 
              aws cloudformation delete-stack --stack-name "udapeople-front-end-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name  "udapeople-back-end-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
        #  context: slack
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]